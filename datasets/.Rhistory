q()
x = 2
typeof(x)
x= c(1, 2, 3)
typeof(x)
class(x)
is.vector(x)
length(x)
x= c(1, 2, 3, 4)
length(x)
sum(x)
x= c(1L, 2L, 3, 4)
class(x)
typeof(x)
x= c(1L, 2L, 3.5, 4)
x= c(1L, 2L, 3L, 4L)
typeof(x)
y = c(5, 6, 7, 8)
x + y
x*y
x%*%y
x = 2e5
x = c(1,2,3,4)
delete.response(y)
delete(y)
?sum
??sum
names(x) = c("one", "two")
attributes(x)
x = c("one", 2L)
x = c("one", 2e-5)
array(c("one"), c(2e-5))
y = array(c("one"), c(2e-5))
y
y = array(c("one"), c(2e-5), c(1,1))
y = array(c("one"), c(2e-5), dim = c(1,1))
?c
x = c(1,2,3,4,5,6)
fx = function(n) {n * n}
fx(y)
fx(x)
x = vector(mode = "integer", 5)
x = vector(mode = "logical", 5)
x = vector(mode = "character", 5)
length(x)
x = c(1, 2, 3, 4)
names(x) = c("one", "two", "three", "four")
attributes(x)
x$names
nemes(x)
names(x)
x = c(1, 2, 3, 4, 5, 6, 7, 8, 9)
dim(x) = c(1, 3, 3)
print(x)
x = c(1, 2, 3, 4, 5, 6, 7, 8, 9)
dim(x) = c(1, 2, 3)
dim(x) = c(2, 1, 3)
dim(x) = c(3, 1, 3)
print(x)
x = c(1, 2, 3, 4, 5, 6, 7, 8, 9)
y = matrix(x, nrows = 3)
y = matrix(x, nrow = 3)
print(y)
cat(y)
y = matrix(x, nrow = 3, ncol=3)
y = matrix(x, ncol=2)
y = matrix(x, ncol=9)
cat(y)
print(y)
x = c(1, 2, 3, 4, 5, 6, 7, 8, 9, 10)
y = matrix(x, ncol=5)
print(y)
c(1:3, 8:12)
p = list(100:300, c("Hellow", "World"), c(TRUE, FALSE))
p[1]
p[[1]]
p[[1]] = c(1:10)
p[[1]]
p[[1, 2]] = 10
p[[1]][2] = 10
p[[1]]
p[[1]][10] = 15
p[[1]]
p[[1]][11] = 16
p[[1]]
p[[1]][14] = 16
p[[1]]
x = c(1,2,3)
y = c(4, 5, 6)
merge(x, y)
merge(x, y) ->> y
print(y)
y = c(4, 5, 6)
z = c(x, 5, 6)
View(fx)
experiment = data.frame(sample = c("S1", "S2", "S3", "S4"), protein = c(25, 28, 30, 65), carbohydrate = c(19, 12, 15, 2))
print(experiment$sample)
print(experiment)
names(x) = c("one", "two", "three")
x$one
x.one
x["one"]
experiment$lipid = c(30, 28, 15, 18)
print(experiment)
System.time()
System.time
system.time()
system.time
Sys.time()
DT <- data.table( ID = 1:50,
Capacity = sample(100:1000, size = 50, replace = F),
Code = sample(LETTERS[1:4], 50, replace = T),
State = rep(c("Alabama","Indiana","Texas","Nevada"), 50))
package.install(data.table)
install.packages("data.table")
DT <- data.table( ID = 1:50,
Capacity = sample(100:1000, size = 50, replace = F),
Code = sample(LETTERS[1:4], 50, replace = T),
State = rep(c("Alabama","Indiana","Texas","Nevada"), 50))
package(data.table)
library(data.table)
DT <- data.table( ID = 1:50,
Capacity = sample(100:1000, size = 50, replace = F),
Code = sample(LETTERS[1:4], 50, replace = T),
State = rep(c("Alabama","Indiana","Texas","Nevada"), 50))
?sample
DT <- data.table( ID = 1:50, + Capacity = sample(100:1000, size = 50, replace = F), + Code = sample(LETTERS[1:4], 50, replace = T), + State = rep(c("Assam","Meghalaya","Sikkim","Manipur"), 50))
DT = data.table( ID = 1:50, + Capacity = sample(100:1000, size = 50, replace = F), + Code = sample(LETTERS[1:4], 50, replace = T), + State = rep(c("Assam","Meghalaya","Sikkim","Manipur"), 50))
DT <- data.table( ID = 1:50, Capacity = sample(100:1000, size = 50, replace = F), Code = sample(LETTERS[1:4], 50, replace = T), State = rep(c("Assam","Meghalaya","Sikkim","Manipur"), 50))
DT
DT
DT[Code == "C", mean(Capacity), State]
DT[Code == "C", .(sum(Capacity), mean(Capacity)), by = State]
DT[Code == "C" & Code == "D", .(sum(Capacity), mean(Capacity)), by = State]
DT[Code == "C" & Code == "D"]
print(DT[Code == "C" & Code == "D"])
print(DT[Code == "C" | Code == "D"])
print(DT[Code == "C" | Code == "A"])
DT
DT[, .(ID, State)]
dt_order <- DT[order(Code)]
dt_order
dt_order <- DT[order(-Code)]
dt_order
dt_order <- DT[order(-Code) & order(State)]
dt_order
dt_order <- DT[order(Code) & order(State)]
dt_order
dt
DT
dt_order <- DT[order(Code, State)]
dt_order
dt_order[Code == A]
dt_order[Code == "A"]
DT[, NewColumn := Capacity + 254]
dt
DT
DT$State
view(DT)
View(DT)
print(DT[Code == "C", MeanValue = mean(Capacity), State])
print(DT[Code == "C", .(MeanValue = mean(Capacity)), State])
print(DT[Code == "C", (MeanValue = mean(Capacity)), State])
print(DT[Code == "C", ~ .(MeanValue = mean(Capacity)), State])
DT[.("Assam")]
setkey(DT, State)
DT[.("Assam")]
workdir("~/r-scripts/datasets")
setwd("~/r-scripts/datasets")
fread("ampad-data.csv")
fread("data-anpad.csv")
fread("data-ampad.csv")
ampad <- fread("data-ampad.csv")
install.packages("readr")
hist(ampad$taxonomy_id)
barplot(ampad$taxonomy_id, xlab = "Taxonomy ID", ylab = "Frequency", main ="Bar plot of Data",ampad$taxonomy_id, col = "blue")
ampad[.(count = .taxonomy_id)]
ampad[.(count = .taxonomy_id), by = taxonomy_id]
View(ampad)
View(ampad)
ampad[.(count = taxonomy_id), by = taxonomy_id]
ampad[, .(count = taxonomy_id), by = taxonomy_id]
ampad[, .(count = .taxonomy_id), by = taxonomy_id]
ampad[, .(count = .N), by = taxonomy_id]
#read ampad data sets
ampad <- fread('data-ampad.csv')
#read ampad data sets
ampad <- fread('data-ampad.csv')
#read ampad data sets
ampad <- fread('data-ampad.csv')
#read ampad data sets
ampad <- fread('data-ampad.csv')
ampad[, .(count = .N, taxonomy_name), by = taxonomy_id]
counted_subset = ampad[, .(count = .N, taxonomy_name), by = taxonomy_id]
barplot(counted_subset$count, xlab = "Taxonomy ID", ylab = "Frequency", main ="Bar plot of Data", counted_subset$taxonomy_name, col = "blue")
counted_subset
ampad_table = as.data.frame(ampad)
ampad_frame = as.data.frame(ampad)
View(ampad_frame)
View(ampad_table)
library(plyr)
ampad_frame %>% tally()
library(dplyr)
install.packages("dplyr")
library(dplyr)
ampad_frame %>% tally()
ampad_frame %>% group_by(cyl) %>% tally()
ampad_frame %>% group_by(taxonomy_id) %>% tally()
# Individual entry
ampad %>% count(taxonomy_id)
# Count state wise entry
ampad %>% group_by(location_id) %>% count(taxonomy_id)
taxa_count <- ampad %>% group_by(location_id) %>% count(taxonomy_id, taxonomy_name, sort = TRUE)
taxa_count
# install.packages("dplyr")
barplot(taxa_count$n, xlab = "Taxonomy", ylab = "Frequency", main ="Bar plot of Data", taxa_count$taxonomy_name, col = "blue")
# install.packages("dplyr")
barplot(taxa_count$n)
# install.packages("dplyr")
barplot(taxa_count$n, xlab = "Taxonomy", ylab = "Frequency", main ="Bar plot of Data")
# install.packages("dplyr")
barplot(taxa_count$n, xlab = "Taxonomy", ylab = "Frequency", main ="Bar plot of Data", taxa_count$taxonomy_name)
# install.packages("dplyr")
barplot(taxa_count$n, xlab = "Taxonomy", ylab = "Frequency", main ="Bar plot of Data", names.arg = taxa_count$taxonomy_name)
# install.packages("dplyr")
barplot(taxa_count$n, xlab = "Taxonomy", ylab = "Frequency", main ="Bar plot of Data", names.arg = taxa_count$taxonomy_id)
taxa_count
# install.packages("dplyr")
barplot(taxa_count$n, xlab = "Taxonomy", ylab = "Frequency", main ="Bar plot of Data", names.arg = taxa_count$location_id)
View(taxa_count)
# plot
data_attached_plot = ggplot(taxa_count, aes(x=taxonomy_id, y=n, group=location_id, color=peak))
library(ggplot)
install.packages("ggplot2")
# plot
data_attached_plot = ggplot(taxa_count, aes(x=location_id, y=n, group=taxonomy_name, color=peak))
library(ggplot2)
# plot
data_attached_plot = ggplot(taxa_count, aes(x=location_id, y=n, group=taxonomy_name, color=peak))
data_attached_plot + geom_bar()
data_attached_plot + geom_bar(stat="identity")
# plot
data_attached_plot = ggplot(taxa_count, aes(x=location_id, y=n, group=taxonomy_name, color=peak)) + geom_bar(stat="identity")
# plot
ggplot(taxa_count, aes(x=location_id, y=n, group=taxonomy_name, color=peak)) + geom_bar(stat="identity")
# plot
ggplot(taxa_count, aes(x=location_id, y=n, group=taxonomy_name, color=taxonomy_id)) + geom_bar(stat="identity")
# plot
ggplot(taxa_count, aes(x=location_id, y=n, group=taxonomy_name, color=taxonomy_name)) + geom_bar(stat="identity")
# plot
ggplot(taxa_count, aes(x=location_id, y=n, group=taxonomy_name, fill=taxonomy_name)) + geom_bar(stat="identity")
# plot
ggplot(taxa_count, aes(x=location_id, y=n, group=taxonomy_name, fill=taxonomy_name)) + geom_bar(stat="identity", position="dodge")
# plot
ggplot(taxa_count[20,], aes(x=location_id, y=n, group=taxonomy_name, fill=taxonomy_name)) + geom_bar(stat="identity", position="dodge")
taxa_count
loc_17 %>% select(location_id, taxonomy_name, n) %>% filter(location_id == 17)
taxa_count %>% select(location_id, taxonomy_name, n) %>% filter(location_id == 17)
loc_17 = taxa_count %>% select(location_id, taxonomy_name, n) %>% filter(location_id == 17)
ggplot(taxa_count, aes(x=taxonomy_name, y=n)) + geom_bar(stat = "identity")
loc_17 = taxa_count %>% select(location_id, taxonomy_name, taxonomy_id, n) %>% filter(location_id == 17)
ggplot(taxa_count, aes(x=taxonomy_name, y=n)) + geom_bar(stat = "identity")
ggplot(taxa_count, aes(x=taxonomy_id, y=n)) + geom_bar(stat = "identity")
ggplot(taxa_count, aes(x=taxonomy_name, y=n)) + geom_bar(stat = "identity") + theme(axix.text.x = element_text(angle = 90))
ggplot(taxa_count, aes(x=taxonomy_name, y=n)) + geom_bar(stat = "identity") + theme(axis.text.x = element_text(angle = 90))
# plot bar
ggplot(loc_17, aes(x=taxonomy_name, y=n)) + geom_bar(stat = "identity") + theme(axis.text.x = element_text(angle = 90))
hplc_standards_data <- read_csv("hplc-standard-data.csv")
hplc_standards_data <-  read.csv("hplc-standard-data.csv")
View(standard_data)
View(hplc_standard_data)
View(hplc_standards_data)
# get peaks of 255nm
std_255 = hplc_standards_data[hplc_standards_data$peak == 2 & hplc_standards_data$wavelength == "255nm", ]
# plot divide by individual peak
ggplot(std_255, aes(x=concentration, y=area, group=peak, color=peak)) + geom_point() + facet_wrap(~peak)
# plot divide by individual peak
ggplot(std_255, aes(x=concentration, y=area, group=peak, color=peak)) + geom_point() + facet_wrap(~peak)
# plot divide by individual peak
ggplot(std_255, aes(x=concentration, y=area, group=peak, color=peak)) + geom_point() + facet_wrap(~peak)
# remove peaks 1, 4, 5
std_255y = std_255[!(std_255$peak %in% c(1, 4, 5)), ]
#without cconcentration 1
std_255y = std_255[!(std_255$peak %in% c(1, 4, 5)) & std_255$concentration != 1, ]
#plot peaks
ggplot(std_255y, aes(x=concentration, y=area, group=peak, color=peak)) + geom_point() + facet_wrap(~peak)
#plot linear modal
ggplot(std_255y, aes(x=concentration, y=area, group=peak, color=peak)) + geom_point() + facet_wrap(~peak) + stat_smooth(method = "lm")
?c
?sample
x = 12
hplc_standards_data <-  read.csv("hplc-standard-data.csv")
# get peaks of 255nm
std_255 = hplc_standards_data[hplc_standards_data$wavelength == "255nm", ]
# plot divide by individual peak
ggplot(std_255, aes(x=concentration, y=area, group=peak, color=peak)) + geom_point() + facet_wrap(~peak)
experiment = data.frame(sample = c("S1", "S2", "S3", "S4"), protein = c(25, 28, 30, 65), carbohydrate = c(19, 12, 15, 2))
View(experiment)
View(experiment)
experiment$protein
mean(experiment$protein)
experiment$lipid = c(10, 20, 30)
experiment$lipid = c(10, 20, 30, 25)
DT <- data.table( ID = 1:50, Capacity = sample(100:1000, size = 50, replace = F), Code = sample(LETTERS[1:4], 50, replace = T), State = rep(c("Assam","Meghalaya","Sikkim","Manipur"), 50))
View(DT)
View(DT)
DT[Code == "C", MeanValue = mean(Capacity), State]
DT[Code == "C", MeanValue = mean(Capacity), State]
DT[Code == "C", MeanValue = mean(Capacity)]
DT[Code == "C", MeanValue = mean(Capacity), by = State]
new_states = DT[Code == "C" | Code == "A"]
View(new_states)
View(new_states)
hplc_standards_data <-  read.csv("hplc-standard-data.csv")
View(hplc_standards_data)
View(hplc_standards_data)
# get peaks of 255nm
std_255 = hplc_standards_data[hplc_standards_data$wavelength == "255nm", ]
View(std_255)
# plot divide by individual peak
ggplot(std_255, aes(x=concentration, y=area, group=peak, color=peak)) + geom_point() + facet_wrap(~peak)
# get peaks of 255nm
std_255 = hplc_standards_data[hplc_standards_data$peak == 2 & hplc_standards_data$wavelength == "255nm", ]
View(std_255)
# plot divide by individual peak
ggplot(std_255, aes(x=concentration, y=area, group=peak, color=peak)) + geom_point() + facet_wrap(~peak)
#plot linear modal
ggplot(std_255y, aes(x=concentration, y=area, group=peak, color=peak)) + geom_point() + facet_wrap(~peak) + stat_smooth(method = "lm")
# remove peaks 1, 4, 5
std_255y = std_255[!(std_255$peak %in% c(1, 4, 5)), ]
#without cconcentration 1
std_255y = std_255[!(std_255$peak %in% c(1, 4, 5)) & std_255$concentration != 1, ]
#plot peaks
ggplot(std_255y, aes(x=concentration, y=area, group=peak, color=peak)) + geom_point() + facet_wrap(~peak)
#plot exponential modal
ggplot(std_255y, aes(x=concentration, y=area, group=peak, color=peak)) + geom_point() + facet_wrap(~peak) + stat_smooth(method = "lm", formula= (y ~ exp(x)))
#get linear modal details
lm_pk_1 = lm(area ~ concentration, data=std_255_p1)
#extract first peak
std_255_p1 = std_255[std_255$peak == 2, ]
#get linear modal details
lm_pk_1 = lm(area ~ concentration, data=std_255_p1)
lm_pk_1
# capture model summary as an object
modelSummary <- summary(modal_pk1)
# capture model summary as an object
modelSummary <- summary(lm_pk_1)
modelSummary
predict(lm_pk_1, 12345678)
predict(lm_pk_1, c(12345678))
hplc_standards_data <-  read.csv("hplc-standard-data.csv")
# get peaks of 255nm
std_255 = hplc_standards_data[hplc_standards_data$wavelength == "255nm", ]
# Grid plot divide by individual peak
ggplot(std_255, aes(x=concentration, y=area, group=peak, color=peak)) + geom_point() + facet_wrap(~peak)
# remove peaks 1, 4, 5
std_255_trim = std_255[!(std_255$peak %in% c(1, 4, 5)), ]
# Remove cconcentration 1 for better fit
std_255_trim = std_255[!(std_255$peak %in% c(1, 4, 5)) & std_255$concentration != 1, ]
#plot peaks
ggplot(std_255_trim, aes(x=concentration, y=area, group=peak, color=peak)) + geom_point() + facet_wrap(~peak)
#plot linear modal
ggplot(std_255_trim, aes(x=concentration, y=area, group=peak, color=peak)) + geom_point() + facet_wrap(~peak) + stat_smooth(method = "lm")
# extract peak Number 2 individually
std_255_p2 = std_255[std_255$peak == 2, ]
#plot with trendline - linear modal
ggplot(std_255_p2, aes(x=concentration, y=area, group=peak)) + geom_point() + stat_smooth(method = "lm")
#get linear modal details
lm_pk_1 = lm(area ~ concentration, data=std_255_p2)
#get linear modal details
lm_pk_2 = lm(area ~ concentration, data=std_255_p2)
#get intercept and slope
print(lm_pk_2)
#get summary and r squared
summary(lm_pk_2)
# capture model summary as an object
modelSummary <- summary(modal_pk1)
# model coefficients
modelCoeffs <- modelSummary$coefficients
# capture model summary as an object
modelSummary <- summary(lm_pk_2)
# model coefficients
modelCoeffs <- modelSummary$coefficients
print(modelCoeffs)
View(hplc_standards_data)
#Make Predictions
predict(lm_pk_2, data.frame(concentration = 123456789))
#Read ampad data set as Data Table
ampad <- fread('data-ampad.csv')
# Covert Data Table to Data Frame
ampad_frame <- as.data.frame(ampad)
#View Total Entries in Data Frame
ampad_frame %>% tally()
#Individual taxonomy entry
ampad_frame %>% group_by(taxonomy_id) %>% tally()
# Individual entry
ampad %>% count(taxonomy_id)
# Count state wise entry
ampad_frame %>% group_by(location_id) %>% count(taxonomy_id)
# prepare subset of Counted Data
taxa_count <- ampad_frame %>% group_by(location_id) %>% count(taxonomy_id, taxonomy_name, sort = TRUE)
print (taxa_count)
# Make a bar plot
ggplot(taxa_count, aes(x=location_id, y=n, group=taxonomy_name, fill=taxonomy_name)) + geom_bar(stat="identity")
View(ampad_frame)
# prepare subset of Counted Data
taxa_count <- ampad_frame %>% select(location) %>% group_by(location_id) %>% count(taxonomy_id, taxonomy_name, sort = TRUE)
View(ampad_frame)
# prepare subset of Counted Data
taxa_count <- ampad_frame %>% group_by(location_id) %>% count(taxonomy_id, taxonomy_name, sort = TRUE)
# prepare subset of Counted Data
taxa_count <- ampad_frame %>% group_by(location_id) %>% count(taxonomy_id, location, taxonomy_name, sort = TRUE)
print(taxa_count)
# Make a bar plot
ggplot(taxa_count, aes(x=location, y=n, group=taxonomy_name, fill=taxonomy_name)) + geom_bar(stat="identity")
# Make a bar plot
ggplot(taxa_count, aes(x=location, y=n, group=taxonomy_name, fill=taxonomy_name)) + geom_bar(stat="identity") + theme(axis.text.x = element_text(angle = 90))
#Now filter location id 17
loc_17 = taxa_count %>% select(location_id, location, taxonomy_name, taxonomy_id, n) %>% filter(location_id == 17)
# plot bar
ggplot(loc_17, aes(x=taxonomy_name, y=n)) + geom_bar(stat = "identity") + theme(axis.text.x = element_text(angle = 90))
# plot bar
ggplot(loc_17, aes(x=taxonomy_name, y=n)) + geom_bar(stat = "identity") + theme(axis.text.x = element_text(angle = 90)) + theme_minimal()
